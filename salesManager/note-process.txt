price in the screen is localestring => remember to convert to double after call api


click search to get the input text and render the product in the screen

take and limit to limit the record

take = số record sẽ lấy

skip = số page-1 *take

truyền số page vào để render ra đúng page

render pagination bar : lấy page được chọn thì tô màu khác, lấy tổng record / số take để lấy được số page

other filter implement later

lý do không nghe sự kiện của các element được là do những element đó được tạo ra trong quá trình thực thi web do đó phải bắt sự kiện những element tĩnh

Nhấp vào mua => nếu đã bấm mua thì tăng số lượng món hàng lên
Nếu chưa thì thêm object gồm id món hàng và số lượng là 1 vào

Nhấp vào cancal => Nếu đã bấm mua thì giảm số lượng
Nếu số lượng = 1 thì xoá khỏi storage

code check storage đọc lại sau
document.querySelector('.product-container').onmouseenter = function (e) {
  let allBuyBtns = e.currentTarget.querySelectorAll('.buy-btn')
  let allCancelBtns = e.currentTarget.querySelectorAll('.cancel-btn')
  for (let i = 0; i < allBuyBtns.length; i++) {
    allBuyBtns[i].onclick = function (e) {
      e.stopPropagation()
      const currentItem = e.currentTarget.parentElement.id
      let checkItemsBought = false
      for (let key in currentCart) {
        if (currentCart[key].id == currentItem) {
          checkItemsBought = true
          currentCart[key].quantity += 1
          break
        }
      }
      if (!checkItemsBought)
        currentCart.push({
          id: currentItem,
          quantity: 1
        })
      localStorage.setItem('item', JSON.stringify(currentCart))
      console.log(localStorage.getItem('item'))
    }
    allCancelBtns[i].onclick = function (e) {
      e.stopPropagation()
      const currentItem = e.currentTarget.parentElement.id
      let checkItemsBought = false
      if (localStorage.getItem('item') != undefined) {
        for (let key in currentCart) {
          if (currentCart[key].id == currentItem) {
            checkItemsBought = true
            if (currentCart[key].quantity < 2) {
              currentCart.splice(currentCart.indexOf(currentCart[key]), 1)
              localStorage.removeItem('item')
              break
            } else {
              currentCart[key].quantity -= 1
              break
            }
          }
        }
      } else {
        alert('Bạn chưa mua hàng')
      }

      if (!checkItemsBought) alert('Bạn chưa mua món hàng này')

      localStorage.setItem('item', JSON.stringify(currentCart))
      console.log(localStorage.getItem('item'))
    }
  }
}

if (currentCart[`${allBuyBtns[i]}`]) {
      currentCart[`${allBuyBtns[i]}`] += 1
    } else {
      currentCart[`${allBuyBtns[i]}`] = 1
    }

Xử lấy  trong localStorage và in số lượng hàng đã mua lên màn hình
document.querySelector('.product-container').onmouseenter = function (e) {
  let allBuyBtns = e.currentTarget.querySelectorAll('.buy-btn')
  let allCancelBtns = e.currentTarget.querySelectorAll('.cancel-btn')
  for (let i = 0; i < allBuyBtns.length; i++) {
    allBuyBtns[i].onclick = function (e) {
      const currentItem = e.currentTarget.parentElement.id
      const currentProducts = allBuyBtns[i].parentElement.querySelector(
        '.product'
      )
      if (currentCart[currentItem]) {
        currentCart[currentItem] += 1
      } else {
        currentCart[currentItem] = 1
      }
      currentProducts.innerHTML =
        currentCart[currentItem] != undefined ? currentCart[currentItem] : ''
      console.log(currentProducts.innerHTML)

      localStorage.setItem('item', JSON.stringify(currentCart))
      console.log(localStorage.getItem('item'))
    }

    allCancelBtns[i].onclick = function (e) {
      const currentItem = e.currentTarget.parentElement.id
      const currentProducts = allBuyBtns[i].parentElement.querySelector(
        '.product'
      )
      if (currentCart[currentItem]) {
        if (currentCart[currentItem] < 2) {
          delete currentCart[currentItem]
        } else {
          currentCart[currentItem] -= 1
        }
      } else {
        alert('Bạn chưa mua món hàng này')
      }

      currentProducts.innerHTML =
        currentCart[currentItem] != undefined ? currentCart[currentItem] : ''
      console.log(currentProducts.innerHTML)
      localStorage.setItem('item', JSON.stringify(currentCart))
      console.log(localStorage.getItem('item'))
    }
  }
}

add the count quantity to render 



sau khi đăng nhập thực hiện lưu token vào storage

thực hiện các lệnh mua, purchase => kiểm tra header xem api có đúng là phiên đăng nhập đấy không, nếu đúng thì trả về thành công và chuyển hướng trang 

Tạo 1 module mới, return về các function cần thiết, khi gọi api chỉ cần return các function ấy là được

Xem lại bên manage-product.js + index.js phần Product
Tạo ra 1 function nhận vào 1 tham số là model và trả về 1 function => khi gọi tới function đó thì mặc định được trả về 1 function

=> Sau này khi xây dựng chương trình, chia model ra cho dễ quản lý




----------------

localStorage nhận value là 1 file json

vào trang đăng nhập => kiểm tra xem đến từ trang nào, kiểm tra trong storage

vào trong homepage => nếu có user trong storage => lấy ra username thay thế vào login

Nếu chọn mouse enter thì sẽ bị lệch chữ do đó handle luôn khi click vào nút
move to another url => window.location.href = "url"




--------------
Tạo 1 object là items chứa các items được đặt vào giỏ hàng

Buy: Kiểm tra xem có username và token không, nếu có thì cho phép bấm vào mua, nếu không thì hỏi xem có muốn đăng nhập không

Buy: Kiểm tra xem items đã có trong giỏ hàng chưa, nếu chưa thì thêm vào, nếu rồi thì tăng số lượng lên
Cancel: Nếu chưa có trong giỏ hàng thì alert thông báo chưa mua hàng, nếu rồi thì trừ quantity đi 1


function check login

param: 
- token: Nếu undefined thì thực hiện confirm
- callback: Nếu có token thì thực hiện callback
=====> không thực hiện được

function confirmRedirectToLogin
Nhận 
1. message
2. path
3. callBack

phần check localstorage, nếu không có thì lắng nghe hành động nếu click vào login thì chuyển về html


Kiểm tra xem nếu product id có trong item thì thực hiện thêm số lượng item vào phần hình product

Nếu token sai thì thực hiện đăng nhập lại

verify token sẽ trả ra về 1 id chính là thứ ta đã mã hoá do đó khi mã hoá lại chỉ cần kiểm tra username có trùng không là sẽ biết đúng sai



set quantity, price và tổng price cho cho sản phẩm trong localStorage





Sửa lại function middleware và các phần liên quan

Thiết lập 1 hàm, nếu truyền vào next thì 

Tạo 1 function chứa các tham số cần thiết cho function khác và return về các function khác, 


Bảng doanh thu:

product:
quantity:
TotalPrice:

Tổng doanh thu 1 tháng: 
Tổng các hoá đơn trong 1 tháng

Top xx doanh thu => Sắp xếp rồi lấy xx phần tử

Doanh thu cao nhất => sắp xếp rồi lấy những phần tử trùng với phần tử đứng đầu


khi thêm vào db chỉ thêm những thông tin cần thiết như số lượng, username, các thông tin liên kết được với các thông tin khác như tổng giá tiền tính toán = quantity x giá product, ...


nếu muốn 1 đoạn mã nào đó chạy khi trang web được load lại thì chỉ cần gọi tới function chưa đoạn mã đó là được, onload chỉ được dùng khi toàn bộ trang web load xong


Nhớ ghi lại luồng làm từng cái 1




Có thể thêm nhiều middleware để có thể check validate tuỳ theo ý muốn

Khi thực hiện mua hàng => gửi thông tin mua hàng lên req bao gồm username, item, total

lúc nào cũng phải gửi lên username trong phiên đăng nhập hiện tại và token, nếu token username trùng với username và user vẫn còn trong db thì cho chạy hàm tiếp theo

IIFE cần phải được gọi ngay để thực thi ngay


những hàm có gửi username trong body request thì phải check xem nó có trùng với username trong token hay không

return dùng để dùng function lại, res.status.send chỉ có tác dụng gửi lỗi chứ không có tác dụng dừng function

CẦN HỎI XEM DÙNG STORAGE ĐỂ LƯU GIỎ HÀNG CỦA USER CÓ HỢP LÝ KHÔNG


mục đích check user trong body request do lưu username của người mua trong storage

check user có còn khả dụng trong db không, nếu không thì trả về lỗi
Dùng id check do đó có thể không conflict với các trường hợp khác

cần hỏi nếu bấm lùi về trang khác thì làm sao lấy được địa chỉ trang đó

phải check xem có storage không rồi mới check xem storage có hợp lệ không



Kiểm tra req body có trường nào null không
Tìm xem có product nào trùng hợp không findOneAndUpdate có rồi nên không cần dùng hàm checkExists
Nếu không thì trả ra lỗi
